<?php
/*
 * @version $Id$
 LICENSE

  This file is part of the openvas plugin.

 Order plugin is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 openvas plugin is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with GLPI; along with openvas. If not, see <http://www.gnu.org/licenses/>.
 --------------------------------------------------------------------------
 @package   openvas
 @author    Teclib'
 @copyright Copyright (c) 2016 Teclib'
 @license   GPLv2+
            http://www.gnu.org/licenses/gpl.txt
 @link      https://github.com/pluginsglpi/openvas
 @link      http://www.glpi-project.org/
 @link      http://www.teclib-edition.com/
 @since     2016
 ---------------------------------------------------------------------- */

if (!defined('GLPI_ROOT')){
   die("Sorry. You can't access directly to this file");
}

class PluginOpenvasVulnerability extends CommonDBTM {
   static $rightname = 'config';

   public static function getTypeName($nb = 0) {
      return _n("Vulnerability", "Vulnerabilities", 'openvas', 1);
   }

   function getSearchOptions() {

      $tab = array();
      $tab['common'] = __("OpenVAS", "openvas");

      $tab[1]['table']           = $this->getTable();
      $tab[1]['field']           = 'name';
      $tab[1]['name']            = __('Name');
      $tab[1]['datatype']        = 'itemlink';
      $tab[1]['massiveaction']   = false; // implicit key==1

      $tab[2]['table']           = $this->getTable();
      $tab[2]['field']           = 'id';
      $tab[2]['name']            = __('ID');
      $tab[2]['massiveaction']   = false; // implicit field is id
      $tab[2]['datatype']        = 'number';

      $tab[3]['table']          = $this->getTable();
      $tab[3]['field']          = 'openvas_severity';
      $tab[3]['name']           = __('Severity', 'openvas');
      $tab[3]['datatype']       = 'number';

      $tab[4]['table']          = $this->getTable();
      $tab[4]['field']          = 'openvas_vulnerabilities_id';
      $tab[4]['name']           = __('Vulnerability ID', 'openvas');
      $tab[4]['datatype']       = 'string';

      $tab[5]['table']          = $this->getTable();
      $tab[5]['field']          = 'openvas_task_id';
      $tab[5]['name']           = __('Task ID', 'openvas');
      $tab[5]['datatype']       = 'string';

      $tab[6]['table']          = $this->getTable();
      $tab[6]['field']          = 'openvas_task_id';
      $tab[6]['name']           = __('Host ID', 'openvas');
      $tab[6]['datatype']       = 'string';

      $tab[7]['table']          = $this->getTable();
      $tab[7]['field']          = 'openvas_date_mod';
      $tab[7]['name']           = __('OpenVAS Last update');
      $tab[7]['datatype']       = 'datetime';
      $tab[7]['massiveaction']  = false;

      $tab[8]['table']          = $this->getTable();
      $tab[8]['field']          = 'openvas_date_mod';
      $tab[8]['name']           = __('OpeVAS Creation date');
      $tab[8]['datatype']       = 'datetime';
      $tab[8]['massiveaction']  = false;

      $tab[16]['table']          = $this->getTable();
      $tab[16]['field']          = 'description';
      $tab[16]['name']           = __('Comments');
      $tab[16]['datatype']       = 'text';

      $tab[19]['table']          = $this->getTable();
      $tab[19]['field']          = 'date_mod';
      $tab[19]['name']           = __('Last update');
      $tab[19]['datatype']       = 'datetime';
      $tab[19]['massiveaction']  = false;

      $tab[121]['table']          = $this->getTable();
      $tab[121]['field']          = 'date_creation';
      $tab[121]['name']           = __('Creation date');
      $tab[121]['datatype']       = 'datetime';
      $tab[121]['massiveaction']  = false;

      return $tab;
   }

   /**
   * Clean informations that are too old, and not relevant anymore
   */
   static function cronOpenvasSynchronizeVulnerabilities($task) {
      global $DB;

      $config = PluginOpenvasConfig::getInstance();
      //if ($config->fields['openvas_results_last_sync']) {
      //   $restrict_date = " AND creation>".$config->fields['openvas_results_last_sync'];
      //} else {
         $restrict_date = '';
      //}

      //Total of export lines
      $index   = 0;
      $results = PluginOpenvasOmp::getResults(PluginOpenvasOmp::DETAIL,
                                              " NOT name=\"\" $restrict_date");
      $vuln    = new self();

      foreach ($results as $result) {
         $uuid = $result->attributes()->id;

         //If result has no uuid, skip it!
         if (!$uuid) {
            continue;
         }

         //If the vulnerability already exists, skip it!
         if (countElementsInTable('glpi_plugin_openvas_vulnerabilities',
                                  [ 'openvas_vulnerabilities_id' => $uuid])) {
            continue;
         }

         //If there's an host, check if it exists in DB
         //If yes, associate the result to the host
         if (isset($result->host)) {
            $host = $result->host->__toString();
            $item = PluginOpenvasItem::getItemByHost($host);
            if ($item) {
               Toolbox::logDebug($item);
               $tmp['itemtype']          = $item['itemtype'];
               $tmp['items_id']          = $item['items_id'];
               $tmp['openvas_target_id'] = $item['openvas_id'];
            }
         } else {
            continue;
         }

         $tmp['name'] = $result->name->__toString();
         $tmp['openvas_vulnerabilities_id'] = $uuid;
         if (isset($result->task)) {
            $tmp['openvas_task_id'] = $result->task->attributes()->id->__toString();
         }
         if (isset($result->description)) {
            $tmp['description'] = $result->description->__toString();
         }
         if (isset($result->severity)) {
            $tmp['openvas_severity'] = $result->severity->__toString();
         }

         $tmp_date_creation = strval($result->creation_time->__toString());
         if (!empty($tmp_date_creation)) {
            $date = new DateTime($tmp_date_creation);
            $tmp['openvas_date_creation'] = date_format($date, 'Y-m-d H:i:s');
         }
         $tmp_date_mod = strval($result->modification_time->__toString());
         if (!empty($tmp_date_mod)) {
            $date = new DateTime($tmp_date_mod);
            $tmp['openvas_date_mod'] = date_format($date, 'Y-m-d H:i:s');
         }

         $tmp = Toolbox::addslashes_deep($tmp);
         $vuln->add($tmp);
         $index++;
      }

      //Update the last Vulnerability sync date
      PluginOpenvasConfig::updateVulnerabilitySyncDate();

      $task->addVolume($index);
      return true;
   }

   static function cronInfo($name) {
      return array('description' => __("OpenVAS vulnerabilities synchronization", "openvas"));
   }

   public static function updateVulnerabilities() {
      global $DB;

      foreach ($DB->request('glpi_plugin_openvas_items', array('FIELDS' => 'openvas_uuid')) as $target) {
         $results = PluginOpenvasOmp::getResults($target['openvas_uuid']);
      }
   }


   //----------------- Install & uninstall -------------------//
   public static function install(Migration $migration) {
      global $DB;

      //This class is available since version 1.3.0
      if (!TableExists("glpi_plugin_openvas_vulnerabilities")) {
         $migration->displayMessage("Install glpi_plugin_openvas_vulnerabilities");

         $config = new self();

         //Install
         $query = "CREATE TABLE `glpi_plugin_openvas_vulnerabilities` (
                     `id` int(11) NOT NULL auto_increment,
                     `name` varchar(255) character set utf8 collate utf8_unicode_ci NOT NULL,
                     `description` varchar(255) character set utf8 collate utf8_unicode_ci NOT NULL,
                     `itemtype` varchar(255) character set utf8 collate utf8_unicode_ci NOT NULL,
                     `items_id` int(11) NOT NULL DEFAULT '0',
                     `openvas_vulnerabilities_id` varchar(255) character set utf8 collate utf8_unicode_ci NOT NULL,
                     `openvas_severity` int(11) NOT NULL DEFAULT '0',
                     `openvas_task_id` varchar(255) character set utf8 collate utf8_unicode_ci NOT NULL,
                     `openvas_target_id` varchar(255) character set utf8 collate utf8_unicode_ci NOT NULL,
                     `openvas_date_mod` datetime DEFAULT NULL,
                     `openvas_date_creation` datetime DEFAULT NULL,
                     `date_mod` datetime DEFAULT NULL,
                     `date_creation` datetime DEFAULT NULL,
                     PRIMARY KEY  (`id`),
                     KEY `name` (`name`),
                     KEY `item` (`itemtype`,`items_id`),
                     KEY `openvas_vulnerabilities_id` (`openvas_vulnerabilities_id`),
                     KEY `openvas_task_id` (`openvas_task_id`),
                     KEY `openvas_target_id` (`openvas_target_id`),
                     KEY `date_mod` (`date_mod`),
                     KEY `date_creation` (`date_creation`),
                     KEY `openvas_date_mod` (`date_mod`),
                     KEY `openvas_date_creation` (`date_creation`)
                  ) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;";
         $DB->query($query) or die ($DB->error());
      }
      $cron = new CronTask;
      if (!$cron->getFromDBbyName(__CLASS__, 'openvasSynchronizeVulnerabilities')) {
         CronTask::Register(__CLASS__, 'openvasSynchronizeVulnerabilities', DAY_TIMESTAMP,
                            array('param' => 24, 'mode' => CronTask::MODE_EXTERNAL));
      }
   }

   public static function uninstall() {
      global $DB;
      $DB->query("DROP TABLE IF EXISTS `glpi_plugin_openvas_vulnerabilities`");
   }
}
