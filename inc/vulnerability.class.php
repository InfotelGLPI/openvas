<?php
/*
 * @version $Id$
 LICENSE

  This file is part of the openvas plugin.

 Order plugin is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 openvas plugin is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with GLPI; along with openvas. If not, see <http://www.gnu.org/licenses/>.
 --------------------------------------------------------------------------
 @package   openvas
 @author    Teclib'
 @copyright Copyright (c) 2016 Teclib'
 @license   GPLv2+
            http://www.gnu.org/licenses/gpl.txt
 @link      https://github.com/pluginsglpi/openvas
 @link      http://www.glpi-project.org/
 @link      http://www.teclib-edition.com/
 @since     2016
 ---------------------------------------------------------------------- */

if (!defined('GLPI_ROOT')){
   die("Sorry. You can't access directly to this file");
}

class PluginOpenvasVulnerability extends CommonDBTM {
   static $rightname = 'config';

   public static function getTypeName($nb = 0) {
      return _n("Vulnerability", "Vulnerabilities", 'openvas', 1);
   }

   function getSearchOptions() {

      $tab = array();
      $tab['common'] = __("OpenVAS", "openvas");

      $tab[1]['table']           = $this->getTable();
      $tab[1]['field']           = 'name';
      $tab[1]['name']            = __('Name');
      $tab[1]['datatype']        = 'itemlink';
      $tab[1]['massiveaction']   = false; // implicit key==1

      $tab[2]['table']           = $this->getTable();
      $tab[2]['field']           = 'id';
      $tab[2]['name']            = __('ID');
      $tab[2]['massiveaction']   = false; // implicit field is id
      $tab[2]['datatype']        = 'number';

      $tab[3]['table']          = $this->getTable();
      $tab[3]['field']          = 'severity';
      $tab[3]['name']           = __('Severity', 'openvas');
      $tab[3]['massiveaction']   = false;
      $tab[3]['datatype']       = 'float';

      $tab[6]['table']          = $this->getTable();
      $tab[6]['field']          = 'port';
      $tab[6]['name']           = __('Port');
      $tab[6]['datatype']       = 'string';

      $tab[4]['table']          = 'glpi_plugin_openvas_vulnerabilities_items';
      $tab[4]['field']          = 'name';
      $tab[4]['name']           = __('Vulnerability ID', 'openvas');
      $tab[4]['datatype']       = 'string';
      $tab[4]['joinparams']     = [ 'jointype' => 'child' ];
      $tab[4]['forcegroupby']   = true;
      $tab[4]['additionalfields']  = array('itemtype');

      $tab[5]['table']          = 'glpi_plugin_openvas_vulnerabilities_items';
      $tab[5]['field']          = 'openvas_task_id';
      $tab[5]['name']           = __('Task ID', 'openvas');
      $tab[5]['datatype']       = 'string';
      $tab[5]['joinparams']     = [ 'jointype' => 'child' ];
      $tab[5]['forcegroupby']   = true;
      $tab[5]['additionalfields']  = array('itemtype');

      $tab[7]['table']          = 'glpi_plugin_openvas_vulnerabilities_items';
      $tab[7]['field']          = 'openvas_date_mod';
      $tab[7]['name']           = __('OpenVAS Last update', 'openvas');
      $tab[7]['datatype']       = 'datetime';
      $tab[7]['massiveaction']  = false;
      $tab[7]['joinparams']     = [ 'jointype' => 'child' ];
      $tab[7]['forcegroupby']   = true;
      $tab[7]['additionalfields']  = array('itemtype');

      $tab[8]['table']          = 'glpi_plugin_openvas_vulnerabilities_items';
      $tab[8]['field']          = 'openvas_date_mod';
      $tab[8]['name']           = __('OpenVAS Creation date', 'openvas');
      $tab[8]['datatype']       = 'datetime';
      $tab[8]['massiveaction']  = false;
      $tab[8]['joinparams']     = [ 'jointype' => 'child' ];
      $tab[8]['forcegroupby']   = true;
      $tab[8]['additionalfields']  = array('itemtype');

      $tab[13]['table']             = $this->getTable();
      $tab[13]['field']             = 'items_id';
      $tab[13]['name']              = _n('Associated element', 'Associated elements', 2);
      $tab[13]['datatype']          = 'specific';
      $tab[13]['comments']          = true;
      $tab[13]['additionalfields']  = array('itemtype');

      $tab[131]['table']            = $this->getTable();
      $tab[131]['field']            = 'itemtype';
      $tab[131]['name']             = _n('Associated item type', 'Associated item types',2);
      $tab[131]['datatype']         = 'itemtypename';
      $tab[131]['itemtype_list']    = 'ticket_types';

      $tab[16]['table']          = $this->getTable();
      $tab[16]['field']          = 'comment';
      $tab[16]['name']           = __('Comments');
      $tab[16]['datatype']       = 'text';

      $tab[19]['table']          = $this->getTable();
      $tab[19]['field']          = 'date_mod';
      $tab[19]['name']           = __('Last update');
      $tab[19]['datatype']       = 'datetime';
      $tab[19]['massiveaction']  = false;

      $tab[121]['table']          = $this->getTable();
      $tab[121]['field']          = 'date_creation';
      $tab[121]['name']           = __('Creation date');
      $tab[121]['datatype']       = 'datetime';
      $tab[121]['massiveaction']  = false;

      $tab[12]['table']            = 'glpi_plugin_openvas_vulnerabilities_items';
      $tab[12]['field']            = 'name';
      $tab[12]['name']             = _x('quantity', 'Number of associated items');
      $tab[12]['forcegroupby']     = true;
      $tab[12]['usehaving']        = true;
      $tab[12]['datatype']         = 'count';
      $tab[12]['massiveaction']    = false;
      $tab[12]['joinparams']       = [ 'jointype' => 'child' ];

      return $tab;
   }

   /**
    * @since version 0.84
    *
    * @param $field
    * @param $values
    * @param $options   array
   **/
   static function getSpecificValueToDisplay($field, $values, array $options=array()) {

      if (!is_array($values)) {
         $values = array($field => $values);
      }
      switch ($field) {
         case 'items_id':
            if (strpos($values[$field], "_") !== false) {
               $item_itemtype      = explode("_", $values[$field]);
               $values['itemtype'] = $item_itemtype[0];
               $values[$field]     = $item_itemtype[1];
            }

            if (isset($values['itemtype']) && $values[$field] > 0) {
               $item = new $values['itemtype']();
               $item->getFromDB($values[$field]);
               return $item->getLink( ['comments' => (isset($options['comments'])?$options['comments']:false)]);
            }
            break;

         case 'severity':
            return PluginOpenvasItem::displaySeverity(false, $values[$field]);
            break;
      }
      return parent::getSpecificValueToDisplay($field, $values, $options);
   }


   /**
    * @since version 0.84
    *
    * @param $field
    * @param $name            (default '')
    * @param $values          (default '')
    * @param $options   array
    *
    * @return string
   **/
   static function getSpecificValueToSelect($field, $name='', $values='', array $options=array()) {
      if (!is_array($values)) {
         $values = array($field => $values);
      }
      $options['display'] = false;
      switch ($field) {
         case 'items_id' :
            if (isset($values['itemtype']) && !empty($values['itemtype'])) {
               $options['name']  = $name;
               $options['value'] = $values[$field];
               return Dropdown::show($values['itemtype'], $options);
            } else {
               self::dropdownAllDevices($name, 0, 0);
               return ' ';
            }
            break;
      }
      return parent::getSpecificValueToSelect($field, $name, $values, $options);
   }

   function defineTabs($options=array()) {

      $ong = array();
      $this->addDefaultFormTab($ong);
      $this->addStandardTab('PluginOpenvasVulnerability_Item', $ong, $options);

      return $ong;
   }

   function showForm($id, $options=array()) {
      global $CFG_GLPI;

      $this->showFormHeader([ 'colspan' => 4]);

      echo "<tr class='tab_bg_1'>";
      echo "<td>" . _('Name') . "</td>";
      echo "<td>";
      echo $this->getName();
      echo "</td>";
      echo "<td>" .
   	   __('Severity', 'openvas') . "</td>";
      echo "<td class='tab_bg_1'>";
      echo PluginOpenvasItem::displaySeverity(false, $this->fields['severity']);
      echo "</td>";
      echo "</tr>";

      echo "<tr>";
      echo "<td class='tab_bg_1'>" . __('Comments') . "</td><td colspan='3'>";
      echo "<textarea cols='60' rows='5' name='comment' >".
           $this->fields["comment"];
      echo "</textarea>";
      echo "</td>";
      echo "</tr>";

      echo "<tr class='tab_bg_1'>";
      echo "<td>" . _('Port') . "</td>";
      echo "<td>";
      echo $this->fields['port'];
      echo "</td>";
      echo "<td colspan='2'></td>";
      echo "</tr>";

      $this->showFormButtons([ 'canupdate' => false, 'canedit' => false]);
      return true;
   }


   /**
   *Synchronize vulneratiblities from OpenVAS
   */
   static function cronOpenvasSynchronizeVulnerabilities($task) {
      global $DB;

      $config = PluginOpenvasConfig::getInstance();
      $restrict_date = "creation_time<".$config->fields['retention_delay']."d";

      //If OpenVAS is not available, exit process
      if (!PluginOpenvasOmp::ping()) {
        $task->addVolume(0);
        return true;
      }

      //Total of export lines
      $index   = 0;
      $results = PluginOpenvasOmp::getResults($restrict_date);

      if (is_object($results) && get_class($results) == 'SimpleXMLElement') {
        $query = "TRUNCATE TABLE `glpi_plugin_openvas_vulnerabilities_items`";
        $DB->query($query);
      } else {
        $task->addVolume(0);
        return true;
      }

      $vulnerability = new self();
      $vuln_item     = new PluginOpenvasVulnerability_Item();
      $openvas_item  = new PluginOpenvasItem();

      foreach ($results as $result) {
         $uuid = $result->attributes()->id;

         //If result has no uuid, skip it!
         if (!$uuid) {
            continue;

          }
         $vulnerabity_id = 0;

         //If there's an host, check if it exists in DB
         //If yes, associate the result to the host
         if (isset($result->host)) {
            $host = $result->host->__toString();

            $tmp['name'] = $result->name->__toString();
            if (isset($result->description)) {
               $tmp['comment'] = $result->description->__toString();
            } else {
               $tmp['comment'] = '';
            }
            if (isset($result->port)) {
               $tmp['port'] = $result->port->__toString();
            } else {
               $tmp['port'] = '';
            }

            $params = [ 'name'         => $tmp['name'],
                        'comment'      => $tmp['comment']
                      ];
            $params = Toolbox::addslashes_deep($params);

            $query = "`name`='".$params['name'].
                     "' AND `comment`='".$params['comment']."'";
            //New vulnerability for an host
            if (!countElementsInTable('glpi_plugin_openvas_vulnerabilities', $query)) {
               if (isset($result->severity)) {
                  $tmp['severity'] = floatval($result->severity) ;
               }

               $tmp            = Toolbox::addslashes_deep($tmp);
               $vulnerabity_id = $vulnerability->add($tmp);

            } else {
               $iterator = $DB->request('glpi_plugin_openvas_vulnerabilities',
                                        [ 'AND'    => $params,
                                          'FIELDS' => [ 'id' ],
                                          'LIMIT'  => 1
                                        ]);
               if ($vuln = $iterator->next()) {
                  $vulnerabity_id = $vuln['id'];
               }
            }

            if (!$vulnerabity_id) {
               continue;
            }

            $tmp = array();
            if (!countElementsInTable('glpi_plugin_openvas_vulnerabilities_items',
                                      "`plugin_openvas_vulnerabilities_id`='$vulnerabity_id'
                                        AND `host`='$host'")) {

               $tmp['plugin_openvas_vulnerabilities_id'] = $vulnerabity_id;
               $tmp['host'] = $host;
               $tmp['name'] = $uuid;
               if (isset($result->task)) {
                  $tmp['openvas_task_id'] = $result->task->attributes()->id->__toString();
               }

               //Try to get an itemtype associated with the host
               $item = PluginOpenvasItem::getItemByHost($host, true);
               if ($item) {
                  $tmp['itemtype'] = $item['itemtype'];
                  $tmp['items_id'] = $item['items_id'];
               }

               $dates = [ 'creation_time' , 'modification_time' ];
               foreach ($dates as $date_field) {
                  $tmp_date_creation = strval($result->$date_field->__toString());
                  if (!empty($tmp_date_creation)) {
                     $date = new DateTime($tmp_date_creation);
                     $tmp[$date_field] = date_format($date, 'Y-m-d H:i:s');
                  }
               }

               $tmp = Toolbox::addslashes_deep($tmp);
               if ($vuln_item->add($tmp)) {
                  $index++;
               }
            }
         } else {
            continue;
         }
      }

      //Update the last Vulnerability sync date
      PluginOpenvasConfig::updateVulnerabilitySyncDate();

      $task->addVolume($index);
      return true;
   }

   static function cronInfo($name) {
      return [ 'description' => __("OpenVAS vulnerabilities synchronization", "openvas") ];
   }

   //----------------- Install & uninstall -------------------//
   public static function install(Migration $migration) {
      global $DB;

      //This class is available since version 1.3.0
      if (!TableExists("glpi_plugin_openvas_vulnerabilities")) {
         $migration->displayMessage("Install glpi_plugin_openvas_vulnerabilities");

         $config = new self();

         //Install
         $query = "CREATE TABLE `glpi_plugin_openvas_vulnerabilities` (
                     `id` int(11) NOT NULL auto_increment,
                     `name` varchar(255) character set utf8 collate utf8_unicode_ci NOT NULL,
                     `comment` text COLLATE utf8_unicode_ci,
                     `severity` float(11) NOT NULL DEFAULT '0',
                     `date_mod` datetime DEFAULT NULL,
                     `date_creation` datetime DEFAULT NULL,
                     `port` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
                     PRIMARY KEY  (`id`),
                     KEY `name` (`name`),
                     KEY `severity` (`severity`),
                     KEY `port` (`port`),
                     KEY `date_mod` (`date_mod`),
                     KEY `date_creation` (`date_creation`)
                  ) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;";
         $DB->query($query) or die ($DB->error());
      }
      $cron = new CronTask;
      if (!$cron->getFromDBbyName(__CLASS__, 'openvasSynchronizeVulnerabilities')) {
         CronTask::Register(__CLASS__, 'openvasSynchronizeVulnerabilities', DAY_TIMESTAMP,
                            [ 'param' => 24, 'mode' => CronTask::MODE_EXTERNAL ]);
      }
   }

   public static function uninstall() {
      global $DB;
      $DB->query("DROP TABLE IF EXISTS `glpi_plugin_openvas_vulnerabilities`");
   }
}
